import { userModel } from '~/models/userModel'
import ApiError from '~/utils/ApiError'
import { StatusCodes } from 'http-status-codes'
import bcryptjs from 'bcryptjs'
import { v4 as uuidv4 } from 'uuid'
import { pickUser } from '~/utils/formatters'
import { WEBSITE_DOMAIN } from '~/utils/constants'
/* import { BrevoProvider } from '~/providers/BrevoProvider' */
import { ResendProvider } from '~/providers/ResendProvider'
import { env } from '~/config/environment'
import { JwtProvider } from '~/providers/JwtProvider'
import { CloudinaryProvider } from '~/providers/CloudinaryProvider'

const createNew = async (reqBody) => {
  try {
    // ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng c·ªßa ch√∫ng ta hay ch∆∞a
    const existUser = await userModel.findOneByEmail(reqBody.email)
    if (existUser) {
      throw new ApiError(StatusCodes.CONFLICT, 'Email already exists!')
    }

    // T·∫°o data ƒë·ªÉ l∆∞u v√†o Database
    // nameFromEmail: n·∫øu email l√† trungquandev@gmail.com th√¨ s·∫Ω l·∫•y ƒë∆∞·ª£c "trungquandev"
    const nameFromEmail = reqBody.email.split('@')[0]
    const newUser = {
      email: reqBody.email,
      password: bcryptjs.hashSync(reqBody.password, 8), // Tham s·ªë th·ª© 2 l√† ƒë·ªô ph·ª©c t·∫°p, gi√° tr·ªã c√†ng cao th√¨ bƒÉm c√†ng l√¢u(M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u)
      username: nameFromEmail,
      displayName: nameFromEmail, // M·∫∑c ƒë·ªãnh ƒë·ªÉ gi·ªëng username khi user ƒëƒÉng k√Ω m·ªõi, v·ªÅ sau l√†m t√≠nh nƒÉng update cho user
      verifyToken: uuidv4() // T·∫°o token x√°c th·ª±c t√†i kho·∫£n ng·∫´u nhi√™n
    }

    // Th·ª±c hi·ªán l∆∞u th√¥ng tin user v√†o Database
    const createdUser = await userModel.createNew(newUser)
    const getNewUser = await userModel.findOneById(createdUser.insertedId)

    // G·ª≠i email cho ng∆∞·ªùi d√πng x√°c th·ª±c t√†i kho·∫£n (b∆∞·ªõc sau...)
    const verificationLink = `${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`

    const customSubject = 'üîê X√°c th·ª±c t√†i kho·∫£n Trello VanKietDev'

    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; border: 1px solid #e0e0e0; padding: 30px; border-radius: 8px;">
        <h2 style="color: #333333;">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi <span style="color: #007bff;">Trello VanKietDev</span> üéâ</h2>
        <p>Ch√∫ng t√¥i r·∫•t vui khi b·∫°n ƒë√£ ƒëƒÉng k√Ω. Vui l√≤ng x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng:</p>

        <div style="text-align: center; margin: 30px 0;">
          <a href="${verificationLink}" 
            style="background-color: #007bff; color: white; text-decoration: none; padding: 12px 24px; border-radius: 5px; font-weight: bold;">
            X√°c th·ª±c t√†i kho·∫£n ngay
          </a>
        </div>

        <p>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n, vui l√≤ng b·ªè qua email n√†y.</p>
        <hr style="margin: 30px 0;" />
        <p style="font-size: 14px; color: #666;">Tr√¢n tr·ªçng,<br/>‚Äî ƒê·ªôi ng≈© <strong>VanKietDev</strong></p>
      </div>
    `
    // G·ªçi t·ªõi Provider g·ª≠i email
    await ResendProvider.sendEmail(getNewUser.email, customSubject, htmlContent)

    // return tr·∫£ v·ªÅ d·ªØ li·ªáu cho ph√≠a Controller
    return pickUser(getNewUser)
  } catch (error) { throw error }
}

const verifyAccount = async (reqBody) => {
  try {
    // Query user trong Database
    const existUser = await userModel.findOneByEmail(reqBody.email)

    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser) throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found!')
    if (existUser.isActive) throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is already active!')
    if (reqBody.token !== existUser.verifyToken) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Token is invalid!')
    }

    // N·∫øu nh∆∞ m·ªçi th·ª© ok th√¨ ch√∫ng ta b·∫Øt ƒë·∫ßu update l·∫°i th√¥ng tin c·ªßa th·∫±ng user ƒë·ªÉ verify account
    const updateData = {
      isActive: true,
      verifyToken: null
    }
    // C·∫≠p nh·∫≠t th√¥ng tin user
    const updatedUser = await userModel.update(existUser._id, updateData)

    return pickUser(updatedUser)
  } catch (error) { throw error }
}

const login = async (reqBody) => {
  try {
    // Query user trong Database
    const existUser = await userModel.findOneByEmail(reqBody.email)

    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser) throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found!')
    if (!existUser.isActive) throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is not active!')
    if (!bcryptjs.compareSync(reqBody.password, existUser.password)) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your Email or Password is incorrect!')
    }

    // N·∫øu m·ªçi th·ª© ok th√¨ b·∫Øt ƒë·∫ßu t·∫°o Tokens ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE
    // T·∫°o th√¥ng tin s·∫Ω ƒë√≠nh k√®m trong JWT Token bao g·ªìm _id v√† email c·ªßa user
    const userInfo = { _id: existUser._id, email: existUser.email }

    // T·∫°o ra 2 lo·∫°i token, accessToken v√† refreshToken ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE
    const accessToken = await JwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      // 5 // 5 gi√¢y
      env.ACCESS_TOKEN_LIFE
    )

    const refreshToken = await JwtProvider.generateToken(
      userInfo,
      env.REFRESH_TOKEN_SECRET_SIGNATURE,
      // 15 // 15 gi√¢y
      env.REFRESH_TOKEN_LIFE
    )

    // Tr·∫£ v·ªÅ th√¥ng tin c·ªßa user k√®m theo 2 c√°i token v·ª´a t·∫°o ra
    return { accessToken, refreshToken, ...pickUser(existUser) }
  } catch (error) { throw error }
}

const refreshToken = async (clientRefreshToken) => {
  try {
    // Verifi / Gi·∫£i m√£ ƒë·ªÉ ki·ªÉm tra refresh token c√≥ h·ª£p l·ªá kh√¥ng
    const refreshTokenDecoded = await JwtProvider.verifyToken(
      clientRefreshToken,
      env.REFRESH_TOKEN_SECRET_SIGNATURE
    )

    // B·ªüi v√¨ ch√∫ng ta ch·ªâ l∆∞u nh·ªØng th√¥ng tin unique v√† c·ªë ƒë·ªãnh c·ªßa user trong token r·ªìi, v√¨ v·∫≠y c√≥ th·ªÉ l·∫•y lu√¥n t·ª´ decoded ra, ti·∫øt ki·ªám query v√†o DB ƒë·ªÉ l·∫•y data m·ªõi.
    const userInfo = {
      _id: refreshTokenDecoded._id,
      email: refreshTokenDecoded.email
    }

    // T·∫°o accessToken m·ªõi
    const accessToken = await JwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      // 5 // 5 gi√¢y ƒë·ªÉ test accessToken h·∫øt h·∫°n
      env.ACCESS_TOKEN_LIFE // v√≠ d·ª•: '1h'
    )

    return { accessToken }
  } catch (error) { throw error }
}

const update = async (userId, reqBody, userAvatarFile) => {
  try {
    // Query User v√† ki·ªÉm tra cho ch·∫Øc ch·∫Øn
    const existUser = await userModel.findOneById(userId)
    if (!existUser) throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found!')
    if (!existUser.isActive) throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is not active!')

    // Kh·ªüi t·∫°o k·∫øt qu·∫£ updated User ban ƒë·∫ßu = empty
    let updatedUser = {}

    // Tr∆∞·ªùng h·ª£p change password
    if (reqBody.current_password && reqBody.new_password) {
      // Ki·ªÉm tra xem c√°i current_password c√≥ ƒë√∫ng hay kh√¥ng
      if (!bcryptjs.compareSync(reqBody.current_password, existUser.password)) {
        throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your Current Password is incorrect!')
      }
      // N·∫øu nh∆∞ current_password l√† ƒë√∫ng th√¨ ch√∫ng ta s·∫Ω hash m·ªôt c√°i m·∫≠t kh·∫©u m·ªõi v√† update l·∫°i v√†o DB:
      updatedUser = await userModel.update(existUser._id, {
        password: bcryptjs.hashSync(reqBody.new_password, 8)
      })
    } else if (userAvatarFile) {
      // Tr∆∞·ªùng h·ª£p upload file l√™n Cloud Storage, c·ª• th·ªÉ l√† Cloudinary
      const uploadResult = await CloudinaryProvider.streamUpload(userAvatarFile.buffer, 'users')
      console.log('uploadResult: ', uploadResult)

      // L∆∞u l·∫°i url (secure_url) c·ªßa c√°i file ·∫£nh v√†o trong Database
      updatedUser = await userModel.update(existUser._id, {
        avatar: uploadResult.secure_url
      })

    } else {
      // Tr∆∞·ªùng h·ª£p update c√°c th√¥ng tin chung, v√≠ d·ª• nh∆∞ displayName
      updatedUser = await userModel.update(existUser._id, reqBody)
    }

    return pickUser(updatedUser)
  } catch (error) { throw error }
}

export const userService = {
  createNew,
  verifyAccount,
  login,
  refreshToken,
  update
}
